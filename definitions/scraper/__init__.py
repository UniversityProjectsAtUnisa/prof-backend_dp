# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: scraper.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class ScrapeRequest(betterproto.Message):
    text: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ScrapeReply(betterproto.Message):
    language: str = betterproto.string_field(1)
    disambiguous: bool = betterproto.bool_field(2)
    data: str = betterproto.string_field(3)
    disambiguous_data: List["DisamiguousLink"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class DisamiguousLink(betterproto.Message):
    label: str = betterproto.string_field(1)
    url: str = betterproto.string_field(2)


class ScraperStub(betterproto.ServiceStub):
    async def search(self, *, text: str = "") -> "ScrapeReply":

        request = ScrapeRequest()
        request.text = text

        return await self._unary_unary("/scraper.Scraper/Search", request, ScrapeReply)

    async def long_search(self, *, text: str = "") -> "ScrapeReply":

        request = ScrapeRequest()
        request.text = text

        return await self._unary_unary(
            "/scraper.Scraper/LongSearch", request, ScrapeReply
        )


class ScraperBase(ServiceBase):
    async def search(self, text: str) -> "ScrapeReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def long_search(self, text: str) -> "ScrapeReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_search(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "text": request.text,
        }

        response = await self.search(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_long_search(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "text": request.text,
        }

        response = await self.long_search(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/scraper.Scraper/Search": grpclib.const.Handler(
                self.__rpc_search,
                grpclib.const.Cardinality.UNARY_UNARY,
                ScrapeRequest,
                ScrapeReply,
            ),
            "/scraper.Scraper/LongSearch": grpclib.const.Handler(
                self.__rpc_long_search,
                grpclib.const.Cardinality.UNARY_UNARY,
                ScrapeRequest,
                ScrapeReply,
            ),
        }
